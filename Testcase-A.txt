import boto3
import os
import sys
from datetime import datetime, timezone

aws_access_key_id=os.environ['aws_access_key_id']
aws_secret_access_key=os.environ['aws_secret_access_key']

def get_running_ec2_instance_count():
    # Initialize Boto3 client for EC2
    ec2_client = boto3.client('ec2')

    try:
        # Describe instances with running state
        instances_response = ec2_client.describe_instances(Filters=[{'Name': 'instance-state-name', 'Values': ['running']}])
        running_instances = instances_response['Reservations']

        running_instance_count = sum(len(reservation['Instances']) for reservation in running_instances)

        return running_instance_count

    except Exception as e:
        print(f"Failed to get running instance count: {e}")
        return None

running_count = get_running_ec2_instance_count()
# Teststep 1- ASG desire running count should be same as running instances. if mismatch fails

def validate_ec2_asg_count(asgname):
    asg_client = boto3.client('autoscaling',aws_access_key_id=aws_access_key_id,aws_secret_access_key=aws_secret_access_key,region_name='ap-south-1')
    asg_response = asg_client.describe_auto_scaling_groups(AutoScalingGroupNames=[asgname])
    asg = asg_response['AutoScalingGroups'][0]
    assert asg['DesiredCapacity'] == running_count

# Teststep 3- SecuirtyGroup, ImageID and VPCID should be same on ASG running instances.
def get_asg_instance_details(asg_name):
    client = boto3.client('autoscaling')
    response = client.describe_auto_scaling_groups(AutoScalingGroupNames=[asg_name])

    if not response['AutoScalingGroups']:
        raise ValueError("Auto Scaling Group not found.")

    instances = response['AutoScalingGroups'][0]['Instances']
    return instances


def check_instances_properties(instances):
    if not instances:
        print("No instances found in the Auto Scaling Group.")
        return

    base_security_group = None
    base_image_id = None
    base_vpc_id = None

    for instance in instances:
        if not base_security_group:
            base_security_group = instance['SecurityGroups'][0]['GroupId']
            base_image_id = instance['ImageId']
            base_vpc_id = instance['VpcId']
        else:
            if base_security_group != instance['SecurityGroups'][0]['GroupId']:
                print("Security Group mismatch found.")
                return
            if base_image_id != instance['ImageId']:
                print("Image ID mismatch found.")
                return
            if base_vpc_id != instance['VpcId']:
                print("VPC ID mismatch found.")
                return

    print("All instances have matching Security Group, Image ID, and VPC ID.")


if __name__ == "__main__":
    asg_name = "your-asg-name"  # Replace with your Auto Scaling Group name
    instances = get_asg_instance_details(asg_name)
    check_instances_properties(instances)

#Teststep 4- Findout uptime of ASG running instances and get the longest running instance.

def get_asg_instance_details(asg_name):
    client = boto3.client('autoscaling')
    response = client.describe_auto_scaling_groups(AutoScalingGroupNames=[asg_name])

    if not response['AutoScalingGroups']:
        raise ValueError("Auto Scaling Group not found.")

    instances = response['AutoScalingGroups'][0]['Instances']
    return instances


def calculate_uptime(instance):
    launch_time = instance['LaunchTime']
    current_time = datetime.now(timezone.utc)
    uptime = current_time - launch_time
    return uptime


def find_longest_running_instance(instances):
    longest_running_instance = None
    longest_uptime = None

    for instance in instances:
        uptime = calculate_uptime(instance)
        if not longest_uptime or uptime > longest_uptime:
            longest_uptime = uptime
            longest_running_instance = instance

    return longest_running_instance, longest_uptime


if __name__ == "__main__":
    asg_name = "your-asg-name"  # Replace with your Auto Scaling Group name
    instances = get_asg_instance_details(asg_name)
    longest_instance, uptime = find_longest_running_instance(instances)

    if longest_instance:
        print("Longest Running Instance:")
        print("Instance ID:", longest_instance['InstanceId'])
        print("Uptime:", uptime)
    else:
        print("No instances found in the Auto Scaling Group.")

